import streamlit as st
from io import BytesIO
import pandas as pd
import requests

from src.constants import EXAMPLE_TRAIN_TABLE, SERVER_API
from src.utils import create_classification_report


def render_training_section() -> None:
    """
    Renders the training section of the Streamlit app.
    
    This function handles dataset file upload and starts model training if appropriate.
    """    
    # st.header("–ó–∞–≥—É–∑–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
    st.write('''–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –±—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω —Å –Ω–∞—à–∏–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º –∏ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –∏ –∑–∞–º–µ–Ω–µ–Ω–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ.
             –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –∞–¥–∞–ø–∞—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.

             –ü—Ä–∏–º–µ—Ä csv —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω:
    ''')
    st.markdown(EXAMPLE_TRAIN_TABLE, unsafe_allow_html=True)
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞",
                                      accept_multiple_files=False,
                                      key="training_uploader", type="csv")

    if uploaded_file is not None:
    
        st.session_state['training_file'] = uploaded_file

        try:
            df = pd.read_csv(BytesIO(uploaded_file.getvalue()))
        except pd.errors.EmptyDataError:
            st.error("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É!", icon="üö®")
            return

        if df.columns.to_list() != ["text", "class"]:
            st.error("–§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É!", icon="üö®")
            return

        if st.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"):            
            st.success("–û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!")
            file = [('train_data', (st.session_state['training_file'].name,
                                    st.session_state['training_file'].read(),
                                    'text/csv'))]
            
            response = requests.request("POST", f"{SERVER_API}/updateModel", files=file).json()

            if not response.get("status"):
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å!", icon="üö®")
                return
            
            st.success("–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –º–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–∏–ª–∞—Å—å!")

            st.markdown(create_classification_report(response["classificationReport"]))